// Code generated by go-bindata.
// sources:
// assets/VERSION
// assets/upload-new-version.html
// DO NOT EDIT!

package insight_server

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsVersion = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x33\xd4\x33\xd6\x33\xe2\x02\x04\x00\x00\xff\xff\xc8\xfe\xeb\x7e\x07\x00\x00\x00")

func assetsVersionBytes() ([]byte, error) {
	return bindataRead(
		_assetsVersion,
		"assets/VERSION",
	)
}

func assetsVersion() (*asset, error) {
	bytes, err := assetsVersionBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/VERSION", size: 7, mode: os.FileMode(436), modTime: time.Unix(1457960937, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsUploadNewVersionHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x5d\x77\xd3\x38\x13\xbe\x7e\xf9\x15\xc2\x37\x40\xc1\x31\x69\x28\x14\x5e\x3b\xe7\x04\x1a\xd8\x72\xfa\x05\x29\x2d\x1f\x87\x0b\xc5\x1a\xdb\x72\x64\xc9\x95\x64\x27\xe9\xaf\xdf\x91\x9d\x90\xa4\x9b\xf4\xb0\xe7\xec\xee\x45\x1b\x4b\x9a\x79\x66\xe6\x19\xe9\x91\xc2\x87\x47\xe7\xef\x2e\xbf\x5d\x0c\x49\x66\x0b\xd1\x7f\x10\xba\x1f\x22\xa8\x4c\x23\x0f\xa4\xd7\x7f\x40\x48\x98\x01\x65\xee\x03\x3f\x0b\xb0\x94\xc4\x19\xd5\x06\x6c\xe4\x55\x36\xf1\x0f\xbd\xf5\xa5\xcc\xda\xd2\x87\x9b\x8a\xd7\x91\xf7\xd5\xff\x32\xf0\xdf\xa9\xa2\xa4\x96\x8f\x05\x78\x24\x56\xd2\x82\x44\xbf\xe3\x61\x04\x2c\x85\x0d\x4f\x49\x0b\x88\xbc\x9a\xc3\xb4\x54\xda\xae\x19\x4f\x39\xb3\x59\xc4\xa0\xe6\x31\xf8\xcd\xe0\x19\xe1\x92\x5b\x4e\x85\x6f\x62\x2a\x20\xea\x2e\x81\x1e\xfa\x3e\xb9\xcc\x80\xd0\xb1\xaa\x81\xf4\x48\x03\x6c\x69\x6a\xc8\x5e\x51\x19\xbb\x87\xa0\x05\x90\x84\x6b\x63\x11\x82\x58\x34\x75\xb5\xfd\x9f\x50\x39\x27\x0a\x87\xba\x19\x2f\x63\x13\xe7\xd4\xfa\xec\xd1\xc4\x82\xde\x73\x2e\x06\x5a\x48\xdf\x5f\x44\xb5\xdc\x0a\xe8\x0f\x18\xe3\x32\x25\x5f\x0c\x68\x13\x06\xed\xdc\x83\x55\x5a\x6f\x95\xb2\xc6\x6a\x5a\x36\x7e\xab\xf9\x13\x6a\xa1\x0d\x52\x72\x01\x0c\x33\x61\xa4\xc0\xf2\x12\x8e\x83\x77\xa3\xd1\x2a\x8c\xe0\x72\x42\x34\x88\xc8\x33\x76\x2e\xc0\x64\x00\x48\x53\xa6\x21\x89\x3c\x47\xbb\x79\x13\x04\x05\x9d\xc5\x4c\x76\xc6\xcb\x60\x6e\x80\xd0\xc1\xaf\x89\xa0\xd7\xe9\x75\x5e\x06\xb1\x31\xab\xb9\x0e\xc6\xeb\xe0\x8c\x87\x9c\x58\x48\x35\xb7\x73\x8c\x91\xd1\xde\xe1\x0b\xbf\x7b\x73\x58\x5c\x7e\x3c\x1f\x8c\x66\x87\x79\x77\x50\x3d\xa5\x07\xd7\x47\x57\xf2\x82\xef\x8b\xc9\xfb\x64\x3a\x1d\x0e\xe8\x61\x76\x74\xc4\xf2\xef\xa2\x3c\x81\x74\x96\xe5\x57\xa7\xc3\x6e\x92\xe6\xd7\x17\x1f\x8a\xc9\xad\x79\x85\x7d\xd4\xca\x18\xa5\x79\xca\x65\xe4\x51\xa9\xe4\xbc\x50\x95\xf1\xd6\x39\x38\x2f\x2d\x57\x92\x0a\xc7\x2e\x72\xfd\xef\x57\xec\x37\x81\xee\xab\x3b\x39\xb9\xde\x3f\x7b\xde\x15\xa7\x37\x39\x9d\xbc\x9d\xcc\x7a\x22\x38\x7d\x3d\xa4\x59\x35\x2d\x47\x09\x9c\xd5\x57\x2f\x7b\x1f\x0f\xe0\x56\xf6\xaa\xef\xb7\xb4\xbc\x7c\x5e\xbd\x1a\x7e\x33\x5f\x4f\xf3\x4f\x57\x4f\x9f\x0f\xe5\x81\xfe\xad\xba\xff\xb8\x3c\x3d\x39\x20\x26\xe3\x45\xd3\xf6\xcf\x60\x4a\x25\x59\x27\x37\x24\x51\x9a\x1c\x0f\x0f\x89\xa9\x4a\x77\x1a\x88\x4a\x16\xc6\x20\x30\x71\x69\x4d\xbb\x4f\x80\x71\x4a\x6e\x2a\xd0\x1c\xd6\xf6\xa3\x83\xbe\x1e\x7c\x3e\x3b\x3e\xfb\xf0\x66\x1d\x94\x29\x30\xf2\x91\x25\x53\xa5\x27\x84\x27\x64\xae\x2a\xe2\xce\x5b\x73\x0e\x4a\x9a\x02\x8e\x28\x9e\x0e\x01\xc8\xeb\x06\xdc\x0f\xb4\x16\x16\x33\x22\xaf\x7f\xb6\xb3\x38\x6f\x62\xcd\x4b\x4b\x8c\x8e\x57\xdd\xc0\x92\x3b\x8b\x8e\xb8\x26\x38\x2d\x39\xc0\xfa\x6a\x6c\xc2\xab\xce\xfe\x6a\xdc\x50\x9f\x23\x1b\x61\xd0\xc2\xfc\x1d\x54\xdd\x96\x14\x74\x3b\x2f\x10\x73\x31\xda\x81\x18\x3e\xfc\x01\x92\xf1\xe4\x67\x5b\x4e\x18\x2c\xb5\x2c\x1c\x2b\x36\xc7\x66\xb4\x56\x8c\xd7\x24\x16\xd4\x98\xc8\x73\x67\x9f\x72\x09\xda\x5b\xe6\xb4\xb9\xae\xd5\x74\x6d\xe5\xaf\xde\x28\x4a\x85\xdf\xdd\xbf\x63\x73\xd7\xce\xd1\xed\xbb\x5c\x36\xe2\x6c\x58\x67\x5d\xa7\x29\x84\x92\xaa\x64\x28\x12\xa4\x46\x61\xc1\x63\x82\x25\x74\xb7\x60\x07\x08\xbe\xd8\x5b\x1b\xf3\xb8\x93\x0a\xa7\x83\x99\x62\x91\x77\x71\x3e\xba\xf4\x08\x8d\xdd\x71\x8b\xbc\xa0\x05\x36\x01\x65\xcc\x5f\xa0\x7b\x04\x64\x6c\xe7\x25\x4a\x71\x51\x09\xcb\x4b\xaa\x6d\xe0\x30\x7c\x34\xa5\xde\x96\x08\x9b\x75\x35\xa6\xa9\x56\x55\xb9\xab\x2c\x41\xc7\x20\xdc\x06\x47\x12\xb4\x62\x55\x6c\xbd\xfe\x45\xfb\x11\x06\xcd\xe2\x0e\x47\x83\x7b\x3f\xb6\x8b\x7b\x62\xe9\xba\x11\xd7\xb5\x4e\x2b\xb1\x23\xf2\xff\x42\xd5\xe8\x0c\xa9\xa9\xa8\x10\x02\x3b\x20\x31\xf6\xc0\xfd\x84\x41\xbb\xb6\x23\x74\xd0\xc6\xde\xb6\xba\x8b\xf8\x7f\x82\x96\xab\x65\xc7\xef\xa3\x85\xcb\xb2\xb2\xa4\x6d\x99\x85\xd9\x0e\x4a\x96\xd7\xeb\xb2\xcb\x0b\x0e\xea\x2e\x8a\x63\xcf\x23\xc1\x7f\x54\x9a\x13\x17\xaf\xff\x1e\xff\xff\x7e\x51\x8d\xcf\x7d\x45\xb5\x06\xf7\x96\xb0\x6d\x69\x5c\x59\x8b\xbb\xa1\x0d\x62\xaa\x71\xc1\x57\xdc\x8d\xad\x24\xf8\xe7\x33\x48\x28\x1e\x03\xaf\x3f\x6a\xd6\xc3\xa0\x75\xda\x76\xfe\x5c\x66\x6b\x8a\xd1\x06\xde\x32\x5c\x67\xb5\x91\xea\xfc\x13\x0a\xf8\x9c\x3c\x96\x10\x83\x31\x14\x3f\x9d\xfa\xff\x7a\x2f\x3c\x32\xe4\x23\xad\xe9\xa8\xd5\xc5\x52\x54\x78\xa1\x98\x27\x2b\x79\xde\x26\x98\x34\xa7\xb3\x4e\xaa\x54\x2a\x80\x96\xdc\x34\xaa\xe9\xe6\x02\xc1\xc7\x26\xc8\xdd\x8d\x31\x47\xf9\xec\x62\xf7\x17\xa3\x9d\xf2\x89\x09\x1e\xcb\x58\x54\x0c\x5f\x55\x42\xac\xde\x29\x8b\x44\xc8\x63\x6c\xa2\x9a\x3e\x79\x46\x30\x67\xbe\x30\xe4\xa8\xb8\x35\x67\x15\xde\xe8\xae\x37\x78\x59\x19\x22\x01\x18\xba\x6d\x4d\x3b\xbf\xfb\x18\xb9\x9b\x08\xf2\xde\xa8\x75\xd8\xdc\x20\xfd\x3f\x03\x00\x00\xff\xff\x32\x6e\x7b\x9d\xb4\x0a\x00\x00")

func assetsUploadNewVersionHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsUploadNewVersionHtml,
		"assets/upload-new-version.html",
	)
}

func assetsUploadNewVersionHtml() (*asset, error) {
	bytes, err := assetsUploadNewVersionHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/upload-new-version.html", size: 2740, mode: os.FileMode(436), modTime: time.Unix(1457960712, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/VERSION":                 assetsVersion,
	"assets/upload-new-version.html": assetsUploadNewVersionHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"VERSION":                 &bintree{assetsVersion, map[string]*bintree{}},
		"upload-new-version.html": &bintree{assetsUploadNewVersionHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
