// Code generated by go-bindata.
// sources:
// assets/VERSION
// assets/agent-commands.html
// assets/upload-new-version.html
// DO NOT EDIT!

package insight_server

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsVersion = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x33\xd4\x33\xd6\x33\xe6\xe5\x02\x04\x00\x00\xff\xff\x1f\x5b\x95\xe9\x08\x00\x00\x00")

func assetsVersionBytes() ([]byte, error) {
	return bindataRead(
		_assetsVersion,
		"assets/VERSION",
	)
}

func assetsVersion() (*asset, error) {
	bytes, err := assetsVersionBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/VERSION", size: 8, mode: os.FileMode(438), modTime: time.Unix(1458568347, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsAgentCommandsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x6b\x73\xd3\x38\x17\xfe\xce\x0c\xff\x41\x78\x98\x97\xa6\xd4\x76\xd2\x50\x28\x10\xf7\x9d\xd2\x66\xd9\x76\x7a\x83\x74\x5b\x2e\xc3\xec\x28\xf6\xb1\xad\x44\x96\x5c\x49\xce\x05\x86\xff\xbe\x47\xb6\x93\x38\x01\x76\x80\x0f\xdb\x99\xc6\x96\x74\xce\x73\x6e\x3a\xcf\x71\xef\xc1\xf1\xe5\xd1\xf5\xfb\xab\x3e\x49\x4d\xc6\x0f\xee\xdf\xeb\xd9\x27\xe1\x54\x24\x81\x03\xc2\x29\x77\x80\x46\xf8\x24\xf8\xd7\xcb\xc0\x50\x12\xa6\x54\x69\x30\x81\x53\x98\xd8\xdd\x77\xd6\xce\x52\x63\x72\x17\xee\x0a\x36\x09\x9c\x77\xee\x5f\x87\xee\x91\xcc\x72\x6a\xd8\x90\x83\x43\x42\x29\x0c\x08\x54\x3c\xe9\x07\x10\x25\xb0\xae\x2a\x68\x06\x81\x33\x61\x30\xcd\xa5\x32\x0d\xe9\x29\x8b\x4c\x1a\x44\x30\x61\x21\xb8\xe5\x62\x87\x30\xc1\x0c\xa3\xdc\xd5\x21\xe5\x10\x74\x96\x48\x0f\x5c\x97\x5c\xa7\x40\xe8\x50\x4e\x80\x74\x49\x89\x6c\x68\xa2\xc9\x76\x56\x68\xb3\x8d\xa8\x19\x90\x98\x29\x6d\x10\x83\x18\x14\xb5\xf1\xbd\x24\x54\xcc\x89\xc4\xa5\x2a\xd7\x0b\xe3\xc4\x2a\x55\x3a\xdb\x34\x36\xa0\xb6\xad\x8a\x86\x0a\xd2\x75\x17\x66\x0d\x33\x1c\x0e\xae\xd0\x17\x63\x80\x9c\x08\xcd\x92\xd4\x90\xc3\xc4\x42\x60\x06\x32\x2a\x22\xdd\xf3\x2b\xa9\xfb\xf7\x1a\xbe\xbe\x92\xd2\x68\xa3\x68\x5e\x81\x35\x4e\xce\xa8\x81\xca\x76\xce\x38\x44\xe8\x60\x44\x32\x0c\x3b\x66\xb8\x38\x1a\x0c\x1a\xd6\x39\x13\x63\xa2\x80\x07\x8e\x36\x73\x0e\x3a\x05\xc0\xfc\xa5\x0a\xe2\xc0\xb1\x05\xd1\x2f\x7c\x3f\xa3\xb3\x30\x12\xde\x70\x61\xcf\x2e\x10\xdb\x5f\x6e\xf8\x5d\xaf\xeb\x3d\xf5\x43\xad\x57\x7b\x1e\x1a\xf4\x70\xc7\xc1\x5c\x19\x48\x14\x33\x73\xb4\x91\xd2\xee\xfe\x13\xb7\x73\xb7\x9f\x5d\x9f\x5e\x1e\x0e\x66\xfb\xa3\xce\x61\xf1\x98\xee\xdd\x1e\xdf\x88\x2b\xb6\xcb\xc7\x7f\xc4\xd3\x69\xff\x90\xee\xa7\xc7\xc7\xd1\xe8\x03\xcf\xcf\x20\x99\xa5\xa3\x9b\xf3\x7e\x27\x4e\x46\xb7\x57\xaf\xb3\xf1\x67\xfd\x0c\x0b\xac\xa4\xd6\x52\xb1\x84\x89\xc0\xa1\x42\x8a\x79\x26\x0b\xed\xac\xa7\xe1\x32\x37\x4c\x0a\xca\x6d\xde\xb1\x0a\xff\x41\xd0\x6e\x69\xe9\xdf\x42\x8f\xcf\x6e\x77\x2f\xda\x1d\x7e\x7e\x37\xa2\xe3\x57\xe3\x59\x97\xfb\xe7\xcf\xfb\x34\x2d\xa6\xf9\x20\x86\x8b\xc9\xcd\xd3\xee\xe9\x1e\x7c\x16\xdd\xe2\xc3\x67\x9a\x5f\xb7\x8b\x67\xfd\xf7\xfa\xdd\xf9\xe8\xcd\xcd\xe3\x76\x5f\xec\xa9\x9f\x0c\xfd\xcf\xeb\xf3\xb3\x3d\xa2\x53\x96\x95\xc5\x7f\x0b\x3a\x97\x22\xf2\x46\x9a\xc4\x52\x91\x93\xfe\x3e\xd1\x45\x6e\x7b\x85\xc8\xb8\x16\x06\x8e\xae\x0b\xa3\xab\xdb\x02\x11\xa3\xe4\xae\x00\xc5\xa0\x79\x59\x2d\xf6\xed\xe1\xdb\x8b\x93\x8b\xd7\x2f\x9a\xa8\x91\x04\x2d\x1e\x19\x32\x95\x6a\x4c\x58\x4c\xe6\xb2\x20\xb6\x1d\xcb\x2e\xc9\x69\x02\xb8\xa2\xd8\x3b\x1c\x30\xb5\xeb\x78\x1f\x51\x9c\x1b\xf4\x89\x3c\xff\xb4\xd8\xd6\xa1\x62\xb9\x21\x5a\x85\xab\x82\x60\xd4\x5e\x5d\x14\x5b\x07\x4b\x36\x7b\x18\xe0\x04\xeb\xf0\xcc\xdb\x5d\xad\xcb\xec\x8f\x30\x21\x3d\xbf\x82\xf9\x05\x50\x55\x45\xe4\x77\xbc\x27\x08\x59\xaf\x7e\x08\xf8\xe0\x23\x88\x88\xc5\x9f\xca\x70\x7a\x7e\x4d\x76\xbd\xa1\x8c\xe6\x65\x35\xf0\x3d\x62\x13\x12\x72\xaa\x75\xe0\x58\x5a\xa0\x4c\x80\x5a\x12\x4e\xe3\x50\xc9\xe9\x62\x7b\xf3\x28\x94\x48\x55\x99\xdb\xd9\x6d\x0a\x6c\x0a\xd9\x14\xbb\xd6\x81\x15\xfc\x9a\x68\xda\x39\x38\x42\xfb\x4a\x72\xac\x2f\xe7\x84\x26\x65\xa9\xa5\xa5\x31\xa6\x89\x06\x35\x01\x85\x21\x74\x36\x6d\xf8\x68\x64\x79\xb5\x7e\xd3\xf2\xb7\xbb\x55\x3d\x72\x2a\x16\x28\xf8\x6b\xdc\xb0\x62\xbb\x32\xd1\x78\xf6\x43\xbd\xcc\x46\xd0\x54\x34\x58\x9c\x33\x49\x23\x26\x12\xa2\x0d\x35\x85\xf6\x3c\x0f\x41\xac\xe0\xf7\x7c\xfa\xe9\x38\x69\x4d\x0a\x7e\xed\x9a\xf6\x05\x4c\xff\x8f\xec\x4e\x71\xb8\xe4\x15\x65\xff\xaf\x3e\x0b\xd0\x72\x39\x7b\x2a\xc7\x86\x46\x10\xfc\x77\x73\xc5\x32\xaa\xe6\xe5\xfb\x8c\x3b\xc8\xfe\x2a\xb1\x03\xf0\xef\x21\x4e\xca\xb1\x73\x30\xb0\x5a\x3d\x9f\x6e\x3a\xf4\x8b\xa6\x65\xfe\x1b\x96\x65\xbe\x6e\x78\x91\x85\xe6\xfb\x2a\x33\x65\xf3\x8f\xde\x20\x27\xcc\xc9\x96\x80\x10\xb4\xb6\xf0\x96\x50\x96\xa3\xe8\x91\x26\xa7\x74\x42\x07\x55\xab\xe5\xbc\x40\x96\xd2\xad\xaa\xe1\xbf\xdb\x80\x74\x44\x67\x5e\x22\x65\xc2\x81\xe6\x4c\x97\x5d\x68\xf7\x7c\xce\x86\xda\x1f\x59\x06\x9a\x63\x3b\x76\x3a\x5e\xb7\x5e\x7d\xaf\x1d\x4b\xd7\x4e\x44\xc8\x8b\x08\xca\xfb\xbd\x1c\x7d\xb5\x0b\x64\x6b\x08\x5c\x4e\x5b\x3b\x04\xbd\x65\xb5\x20\xc3\xee\x9d\xb0\xa8\xc0\x09\x61\x99\x09\x3b\x43\x13\x01\x10\xa1\xda\xb7\x0e\x8f\x36\x67\xdb\x86\x0b\x4b\xf1\x3a\x7f\x13\xaa\xec\x88\xc1\x5b\x39\x28\x6f\x24\x09\x48\x5c\x88\xd0\x4e\xa4\xad\xd6\x97\xe6\x4d\x7b\xe8\x61\x59\x4e\x07\x97\x17\x5b\xa4\x51\x6d\x85\x09\x16\x66\xa3\xe0\xce\xce\x0a\x84\x44\x14\xbf\x4f\x5a\xe4\xcb\xfa\xc5\x79\xb8\xe5\x78\x6b\xdd\xd4\xf2\x0c\xcc\xcc\x96\x95\xf6\xea\xbd\xd6\x0f\x54\xb0\x8f\x9a\xd2\x46\x37\x04\xbf\xb6\x5e\x36\x9d\x46\x16\xaf\xa2\x23\x30\xb1\x17\xa2\xdb\x46\x12\x41\x8a\x8b\xb4\xa5\xff\x29\x10\x58\xc9\xe2\x07\xdf\x35\xcb\x40\x16\x66\xab\x99\x91\x1d\xf2\xb4\x4d\xb6\x49\xa7\xdd\x6e\xd7\x76\xbe\xbe\xac\x9e\x0f\xd7\xe4\xac\xe1\x66\xad\xfd\x9a\x60\x7b\x7e\xfd\xe1\xf9\x4f\x00\x00\x00\xff\xff\x15\x2c\x55\x89\x8a\x0a\x00\x00")

func assetsAgentCommandsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsAgentCommandsHtml,
		"assets/agent-commands.html",
	)
}

func assetsAgentCommandsHtml() (*asset, error) {
	bytes, err := assetsAgentCommandsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/agent-commands.html", size: 2698, mode: os.FileMode(438), modTime: time.Unix(1458575015, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsUploadNewVersionHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xdb\x72\xd3\x3a\x17\xbe\xfe\x99\xe1\x1d\x84\x6f\x80\x82\x63\xd2\x50\x28\xfc\x76\x67\x02\x0d\xec\x32\x3d\x41\x4a\xcb\x61\xb8\x50\xac\x65\x5b\xae\x2c\xb9\x92\xec\x24\x3c\xfd\x5e\xb2\x9d\x34\x81\x84\xbd\x99\xd9\xc3\x45\x1b\x2f\xad\xc3\xb7\x0e\xd2\x27\x85\xf7\x0e\xcf\x5e\x5f\x7c\x3e\x1f\x91\xcc\x16\xe2\xe0\xee\x9d\xd0\xfd\x12\x41\x65\x1a\x79\x20\x3d\x5c\x21\x24\xcc\x80\xb2\xe6\x0b\xbf\x0b\xb0\x94\xc4\x19\xd5\x06\x6c\xe4\x55\x36\xf1\xf7\xbd\x35\x5d\x66\x6d\xe9\xc3\x4d\xc5\xeb\xc8\xfb\xe4\x7f\x1c\xfa\xaf\x55\x51\x52\xcb\x27\x02\x3c\x12\x2b\x69\x41\xa2\xe3\xd1\x28\x02\x96\xc2\xba\xab\xa4\x05\x44\x5e\xcd\x61\x5a\x2a\x6d\x57\xac\xa7\x9c\xd9\x2c\x62\x50\xf3\x18\xfc\x46\x78\x4c\xb8\xe4\x96\x53\xe1\x9b\x98\x0a\x88\xfa\xcb\x48\xf7\x7c\x9f\x5c\x64\x40\xe8\x44\xd5\x40\x06\xa4\x89\x6c\x69\x6a\xc8\x4e\x51\x19\xbb\x83\x51\x0b\x20\x09\xd7\xc6\x62\x0c\x62\xd1\xd4\xd5\xf7\x7f\x42\xe5\x9c\x28\x14\x75\x23\x2f\xc0\x89\x73\x6a\x7d\x76\x68\x62\x41\xef\x38\x17\x03\x6d\x48\xdf\x5f\xc0\x5a\x6e\x05\x1c\x0c\x19\xe3\x32\x25\x1f\x0d\x68\x13\x06\xed\xda\xdd\x3b\x2b\x99\xbd\x52\xca\x1a\xab\x69\xd9\xba\xae\x68\x8e\xa9\x85\x16\xa9\xe4\x02\x18\xa6\xc3\x48\x81\x45\x26\x1c\x85\xd7\xe3\xf1\x0a\x96\xe0\xf2\x9a\x68\x10\x91\x67\xec\x5c\x80\xc9\x00\xb0\x5b\x99\x86\x24\xf2\x5c\xfb\xcd\xcb\x20\x28\xe8\x2c\x66\xb2\x37\x59\xe0\x39\x01\x63\x07\xcb\x85\x60\xd0\x1b\xf4\x9e\x05\xb1\x31\xb7\x6b\x3d\x04\xec\xe1\x8a\x87\x9d\xb1\x90\x6a\x6e\xe7\x88\x91\xd1\xc1\xfe\x53\xbf\x7f\xb3\x5f\x5c\xbc\x3b\x1b\x8e\x67\xfb\x79\x7f\x58\x3d\xa2\x7b\x57\x87\x97\xf2\x9c\xef\x8a\xeb\x37\xc9\x74\x3a\x1a\xd2\xfd\xec\xf0\x90\xe5\x5f\x44\x79\x0c\xe9\x2c\xcb\x2f\x4f\x46\xfd\x24\xcd\xaf\xce\xdf\x16\xd7\xdf\xcd\x73\x1c\xa7\x56\xc6\x28\xcd\x53\x2e\x23\x8f\x4a\x25\xe7\x85\xaa\x8c\xb7\xde\x86\xb3\xd2\x72\x25\xa9\x70\x5d\xc6\x9e\xff\x81\xa2\xfd\x06\xe9\x57\xa5\x27\xc7\x57\xbb\xa7\x4f\xfa\xe2\xe4\x26\xa7\xd7\xaf\xae\x67\x03\x11\x9c\xbc\x18\xd1\xac\x9a\x96\xe3\x04\x4e\xeb\xcb\x67\x83\x77\x7b\xf0\x5d\x0e\xaa\x2f\xdf\x69\x79\xf1\xa4\x7a\x3e\xfa\x6c\x3e\x9d\xe4\xef\x2f\x1f\x3d\x19\xc9\x3d\xfd\x2f\x4b\xff\xeb\xe2\xe4\x78\x8f\x98\x8c\x17\xcd\xf0\x3f\x80\x29\x95\x64\xbd\xdc\x90\x44\x69\x72\x34\xda\x27\xa6\x2a\xdd\xc9\x20\x2a\xe9\x8c\x41\x60\xea\xd2\x9a\x76\xb7\x00\xe3\x94\xdc\x54\xa0\x39\xac\x6e\x4d\x17\xfb\x6a\xf8\xe1\xf4\xe8\xf4\xed\xcb\xd5\xa8\x4c\x81\x91\xf7\x2d\x99\x2a\x7d\x4d\x78\x42\xe6\xaa\x22\xee\xf0\x35\x67\xa2\xa4\x29\xa0\x44\xf1\xa4\x08\xc0\xd6\xae\xc7\xfb\x8a\xe6\xc2\x62\x4e\xe4\xc5\xb7\x6e\x19\x15\x26\xd6\xbc\xb4\xc4\xe8\xf8\x76\x24\x58\x77\xaf\x1b\x8b\x9b\x84\xa3\x97\x3d\x2c\xb1\xc6\x49\x3c\xef\xed\xde\xca\x4d\xff\x73\x6c\x49\x18\xb4\x61\x7e\x2b\xac\x6e\xab\x0a\xfa\xbd\xa7\x18\xb4\x93\xb6\x85\x0c\xef\x7d\x05\xc9\x78\xf2\xad\x2b\x29\x0c\x96\x04\x17\x4e\x14\x9b\x37\x53\xe9\x4c\x19\xaf\x49\x2c\xa8\x31\x91\xe7\x08\x81\x72\x09\xda\x5b\xa6\xb6\x6e\xa0\xd5\x74\x55\xf5\xb3\x3f\x92\x55\xe1\xf7\x77\x7f\x34\xfa\xd1\xd0\xb5\xde\x77\x29\xad\x43\xad\x99\x67\x7d\xc7\x35\x84\x92\xaa\x64\x48\x1c\xa4\x46\xc2\xc1\x73\x83\xa5\xf4\x37\x45\x0f\x30\xfc\x72\xb3\xad\x69\x70\x6b\x15\x8e\x23\x33\xc5\x22\xef\xfc\x6c\x7c\xe1\x11\x1a\xbb\x23\x18\x79\x41\x1b\xdb\x04\x94\x31\xbf\x03\xf0\x08\xc8\xd8\xce\x4b\xe4\xe9\xa2\x12\x96\x97\x54\xdb\xc0\xc5\xf0\xd1\x94\x7a\x1b\x31\xd6\xab\x6b\x8c\x53\xad\xaa\x72\x6b\x71\x82\x4e\x40\xb8\x4d\x8f\xbd\xd0\x8a\x55\xb1\xf5\x0e\xce\xdb\x8f\x30\x68\x94\xdb\x3c\x0d\x1e\x88\xd8\x76\x17\xc9\xc2\x77\x0d\xd9\x4d\x51\x2b\xb1\x0d\xfb\x7f\xa1\x6a\x08\x88\xd4\x54\x54\x18\x03\x47\x21\x11\x7d\xe8\x7e\xc2\xa0\xd5\x6d\x03\x0f\x5a\xf4\x8d\xea\xed\x13\xf8\x4f\xba\x73\xb9\x18\xff\x2f\xbb\xc3\x65\x59\x59\xd2\x4e\xcf\xc2\x6c\x4b\x67\x16\xd7\xf0\x62\xe0\x5d\x27\xea\x3e\x52\xe7\xc0\x23\xc1\x1f\xac\xcf\x71\x8f\x77\xf0\x06\xff\xff\x46\x65\x8d\xd3\xaf\x2a\x6b\x0d\xfe\xa9\x8e\x8d\xda\x49\x65\x2d\x6e\x8e\x16\xc8\x54\x93\x82\xdf\x36\x71\x62\x25\xc1\x3f\x9f\x41\x42\xf1\x68\x78\x07\xe3\x46\x1f\x06\xad\xd3\xc6\x63\xe9\xd2\x5b\x65\x93\x0e\x7d\x93\xbc\xde\xe1\x86\xd4\xf3\xf7\xc8\xf5\x73\xf2\x40\x42\x0c\xc6\x50\xfc\x74\x17\xc5\xf2\x89\x71\xdf\x90\x77\xb4\xa6\xe3\x96\x3e\x4b\x51\xe1\xed\x63\x1e\xae\x10\xf9\x26\x62\xa5\x39\x9d\xf5\x52\xa5\x52\x01\xb4\xe4\xa6\x61\x57\xb7\x16\x08\x3e\x31\x41\xee\x6e\x97\x39\xd2\x6c\x1f\x77\x43\x27\x6d\xa7\x59\x4c\xf1\x48\xc6\xa2\x62\xf8\x1a\x13\xe2\xf6\x69\xd3\xa5\x42\x1e\xe0\x44\xd5\xf4\xe1\x63\x82\x59\xf3\xce\x90\x23\x33\xd7\x9c\x55\xf8\x02\x70\x73\xc2\x9b\xcd\x10\x09\xc0\xd0\x6d\x73\xe2\xf9\x8f\xef\x97\x9f\x52\xc1\x09\xb4\xac\x1e\x36\xd7\xcd\xc1\xdf\x01\x00\x00\xff\xff\x08\x7a\x5a\x40\xf5\x0a\x00\x00")

func assetsUploadNewVersionHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsUploadNewVersionHtml,
		"assets/upload-new-version.html",
	)
}

func assetsUploadNewVersionHtml() (*asset, error) {
	bytes, err := assetsUploadNewVersionHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/upload-new-version.html", size: 2805, mode: os.FileMode(438), modTime: time.Unix(1457710550, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/VERSION":                 assetsVersion,
	"assets/agent-commands.html":     assetsAgentCommandsHtml,
	"assets/upload-new-version.html": assetsUploadNewVersionHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"VERSION":                 &bintree{assetsVersion, map[string]*bintree{}},
		"agent-commands.html":     &bintree{assetsAgentCommandsHtml, map[string]*bintree{}},
		"upload-new-version.html": &bintree{assetsUploadNewVersionHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
