// Code generated by go-bindata.
// sources:
// assets/VERSION
// assets/agent-commands.html
// DO NOT EDIT!

package insight_server

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsVersion = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x33\xd4\x33\xd6\x33\xe6\x02\x04\x00\x00\xff\xff\x89\xcf\xf0\x67\x07\x00\x00\x00")

func assetsVersionBytes() ([]byte, error) {
	return bindataRead(
		_assetsVersion,
		"assets/VERSION",
	)
}

func assetsVersion() (*asset, error) {
	bytes, err := assetsVersionBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/VERSION", size: 7, mode: os.FileMode(420), modTime: time.Unix(1464073245, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsAgentCommandsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\xfb\x53\xdb\x38\x10\xfe\x9d\xbf\x42\xf5\x74\xae\x09\xc5\x76\x42\x4a\x4b\xdb\x98\x1b\x0a\xb9\x1e\x0c\xaf\x36\x1c\xf4\x31\x9d\x1b\xc5\x5e\xdb\x4a\x64\xc9\x48\x72\x1e\xed\xf4\x7f\xbf\x95\xed\x10\x87\xd2\x1b\xa6\x37\xc7\x0c\x10\x49\xbb\xdf\xb7\x0f\xed\xa7\xf4\x1f\x1d\x9e\x1f\x5c\x7e\xbc\x18\x90\xd4\x64\x7c\x6f\xa3\x6f\xff\x11\x4e\x45\x12\x38\x20\x1c\xbb\x01\x34\xda\xdb\x20\xf8\xd3\xcf\xc0\x50\x12\xa6\x54\x69\x30\x81\x53\x98\xd8\xdd\x75\x9a\x47\xa9\x31\xb9\x0b\x37\x05\x9b\x06\xce\x07\xf7\xaf\x7d\xf7\x40\x66\x39\x35\x6c\xc4\xc1\x21\xa1\x14\x06\x04\xfa\x1d\x0d\x02\x88\x12\x58\xf3\x14\x34\x83\xc0\x99\x32\x98\xe5\x52\x99\x86\xf1\x8c\x45\x26\x0d\x22\x98\xb2\x10\xdc\x72\xb1\x45\x98\x60\x86\x51\xee\xea\x90\x72\x08\xba\x4b\xa0\x47\xae\x4b\x2e\x53\x20\x74\x24\xa7\x40\x7a\xa4\x04\x36\x34\xd1\x64\x33\x2b\xb4\xd9\x44\xd0\x0c\x48\xcc\x94\x36\x08\x41\x0c\x9a\xda\xdc\x5e\x13\x2a\x16\x44\xe2\x52\x95\xeb\x25\x37\xb1\x4e\x95\xcf\x26\x8d\x0d\xa8\x4d\xeb\xa2\xa1\x82\x74\xdd\x9a\xd5\x30\xc3\x61\xef\x02\x23\x31\x06\xc8\x91\xd0\x2c\x49\x0d\xd9\x4f\x2c\x02\xa6\x9f\x51\x11\xe9\xbe\x5f\x59\x6d\xac\x02\x7d\x23\xa5\xd1\x46\xd1\xbc\x44\x5a\xed\x9f\x50\x03\x15\x6d\xce\x38\x44\x18\x5b\x44\x32\x4c\x38\x66\xb8\x38\x18\x0e\x57\xc4\x9c\x89\x09\x51\xc0\x03\x47\x9b\x05\x07\x9d\x02\x60\xe1\x52\x05\x71\xe0\xd8\x46\xe8\x57\xbe\x9f\xd1\x79\x18\x09\x6f\xb4\x24\xb3\x0b\x84\xf6\x6f\x37\xfc\x9e\xd7\xf3\x9e\xfb\xa1\xd6\xab\x3d\x0f\xf9\x3c\xdc\x71\xb0\x4a\x06\x12\xc5\xcc\x02\x39\x52\xda\xdb\x7d\xe6\x76\x6f\x76\xb3\xcb\xe3\xf3\xfd\xe1\x7c\x77\xdc\xdd\x2f\x9e\xd2\x9d\xeb\xc3\x2b\x71\xc1\xb6\xf9\xe4\x8f\x78\x36\x1b\xec\xd3\xdd\xf4\xf0\x30\x1a\x7f\xe2\xf9\x09\x24\xf3\x74\x7c\x75\x3a\xe8\xc6\xc9\xf8\xfa\xe2\x6d\x36\xf9\xaa\x5f\x60\x67\x95\xd4\x5a\x2a\x96\x30\x11\x38\x54\x48\xb1\xc8\x64\xa1\x9d\x66\x0d\xce\x73\xc3\xa4\xa0\xdc\xd6\x1b\xab\xff\xff\x67\xec\x96\x44\xff\x96\x77\x7c\x72\xbd\x7d\xd6\xe9\xf2\xd3\x9b\x31\x9d\xbc\x99\xcc\x7b\xdc\x3f\x7d\x39\xa0\x69\x31\xcb\x87\x31\x9c\x4d\xaf\x9e\xf7\x8e\x77\xe0\xab\xe8\x15\x9f\xbe\xd2\xfc\xb2\x53\xbc\x18\x7c\xd4\x1f\x4e\xc7\xef\xae\x9e\x76\x06\x62\x47\x3d\x28\xef\x3f\x2f\x4f\x4f\x76\x88\x4e\x59\x56\xb6\xfd\x3d\xe8\x5c\x8a\xc8\x1b\x6b\x12\x4b\x45\x8e\x06\xbb\x44\x17\xb9\x9d\x0f\x22\xe3\xda\x18\x38\x06\x2e\x8c\xae\xee\x09\x44\x8c\x92\x9b\x02\x14\x83\xc6\x0d\xb5\xd0\xd7\xfb\xef\xcf\x8e\xce\xde\xbe\x6a\x82\x46\x12\xb4\x78\x62\xc8\x4c\xaa\x09\x61\x31\x59\xc8\x82\xd8\x09\x2c\x27\x23\xa7\x09\xe0\x8a\xe2\xbc\x70\xc0\xba\xae\xc1\x7d\x46\x6b\x6e\x30\x22\xf2\xf2\x4b\xbd\xab\x43\xc5\x72\x43\xb4\x0a\x57\xbd\xc0\x84\xbd\xba\x1f\xb6\x05\x56\x59\x76\x30\xbb\x29\xb6\xe0\x85\xb7\xbd\x5a\x97\x85\x1f\x63\x2d\xfa\x7e\x05\xf3\x70\x4c\x55\xa5\xe3\x77\xbd\x67\x88\x58\xaf\x7e\x86\xf7\xe8\x33\x88\x88\xc5\x5f\x6c\x2a\x7d\xbf\xd2\xb5\xfe\x48\x46\x0b\x6c\xc2\x46\x3f\x62\x53\x12\x72\xaa\x75\xe0\x58\x05\xa0\x4c\x80\x5a\x4a\x4b\xe3\x4c\xc9\x59\xbd\x7b\xf7\x24\x94\x28\x49\x99\xdb\xdd\x6e\x9c\xdf\xb5\xb1\x65\x75\x2d\xf3\x2d\xf6\x9a\x65\xda\xdd\x3b\x40\x6e\x25\x39\x76\x94\x73\x42\x93\xb2\xb9\xd2\xaa\x15\xd3\x44\x83\x9a\x82\xc2\xd0\xbb\x77\x18\x7c\xa4\xa8\x6f\xd2\xaf\xb1\xfe\xb0\x59\x35\x20\xa7\x62\x89\x81\x7f\x8d\x1b\x56\x82\x56\x56\x16\xcf\x7e\xe6\x96\xd9\xd8\x9b\x7e\x06\x9b\x71\x22\x69\xc4\x44\x42\xb4\xa1\xa6\xd0\x9e\xe7\x21\x86\x35\xbc\x27\xa0\x87\x25\x48\xeb\xd1\xf7\xeb\xa8\xb4\x2f\x60\xf6\x3b\x4a\x37\xc5\x87\x23\xaf\x04\xf9\xb7\xfa\x2c\x40\xd6\xf2\x5d\xa9\x82\x1a\x19\x41\xf0\xd7\xcd\x15\xcb\xa8\x5a\x94\x9f\xe7\xdc\x41\x69\x57\x89\x7d\xda\xfe\x1e\xe1\x0b\x38\x71\xf6\x86\xd6\xab\xef\xd3\xbd\xff\xc4\x2c\xf3\x5f\x20\x96\xf9\x1a\x6f\x5d\x81\xc6\xc7\x65\x4d\xca\xf9\x1e\xbf\xc3\xa9\x5f\x90\x96\x80\x10\xb4\xb6\xc8\x56\x32\x6e\x1f\x99\x27\x9a\x1c\xd3\x29\x1d\x56\x03\x95\xf3\x02\x55\x48\xb7\xcb\x99\xbe\x77\xca\xe8\x98\xce\xbd\x44\xca\x84\x03\xcd\x99\x2e\x47\xcd\xee\xf9\x9c\x8d\xb4\x3f\xb6\x12\xb3\xc0\x99\xeb\x76\xbd\x5e\xbd\xba\x67\xe6\xca\xc0\x8e\x44\xc8\x8b\x08\xca\xdb\x7c\xfb\xa8\xd5\x01\x90\xd6\x08\xb8\x9c\xb5\xb7\x08\xc6\xca\x6a\x43\x86\x23\x3a\x65\x51\x81\xf2\x6f\xa5\x07\xe7\x40\x13\x01\x10\xa1\xdb\x0f\xe1\x8e\xef\xbe\x5a\xeb\x01\x2c\x8d\xab\xb2\x4d\xa9\xb2\x8f\x07\xde\xc2\x61\x79\x03\x49\x40\xe2\x42\x84\xf6\xa9\x69\xb5\xbf\xad\xee\xd6\x63\x0f\x3b\x71\x3c\x3c\x3f\x6b\x91\x46\x83\x15\x16\x56\x98\x3b\x3d\x76\xb6\x56\x10\x24\xa2\xf8\x75\xa3\x4d\xbe\xad\x5d\x95\xc7\x2d\xc7\x5b\x9b\x9c\xb6\x67\x60\x6e\x5a\xd6\xd8\xab\xf7\xda\xf7\x7b\xe0\xcc\x34\x8d\x8d\x5e\xd9\x7d\x6f\xbf\x5e\xc5\x8b\xda\x5c\xa5\x45\x60\x6a\xef\x40\xaf\x83\x3a\x81\x0a\x16\x69\x2b\xea\x33\x20\x70\x6b\x8a\x5f\xdb\x2e\x59\x06\xb2\x30\xad\x66\x25\xb6\xc8\xf3\x0e\xd9\x24\xdd\x4e\xa7\x53\x71\x7c\x7f\xbd\x51\x85\xd2\xb4\x42\xce\x46\x6f\xfd\x4a\x37\xfb\x7e\xf5\xb5\xf1\x9f\x00\x00\x00\xff\xff\xc6\x38\x6e\xa9\x47\x0a\x00\x00")

func assetsAgentCommandsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsAgentCommandsHtml,
		"assets/agent-commands.html",
	)
}

func assetsAgentCommandsHtml() (*asset, error) {
	bytes, err := assetsAgentCommandsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/agent-commands.html", size: 2631, mode: os.FileMode(420), modTime: time.Unix(1464073245, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/VERSION": assetsVersion,
	"assets/agent-commands.html": assetsAgentCommandsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"VERSION": &bintree{assetsVersion, map[string]*bintree{}},
		"agent-commands.html": &bintree{assetsAgentCommandsHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

